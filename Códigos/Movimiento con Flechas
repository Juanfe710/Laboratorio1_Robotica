import rclpy    #Librerias
from rclpy.node import Node
from geometry_msgs.msg import Twist
from pynput import keyboard
from threading import Thread

class TurtleController(Node):   #Creacion de Nodo
    def __init__(self):
        super().__init__('turtle_controller')
        self.publisher_ = self.create_publisher(Twist, '/turtle1/cmd_vel', 10)  
        self.listening_thread = Thread(target=self.listen_key)  #Hilo para leer teclado
        self.listening_thread.start()

    def listen_key(self):   #Funcion para leer teclas del teclado
        def on_press(key):
            try:
                #Dependiedo la flecha que se oprima se ejecuta una funcion diferente
                if key == keyboard.Key.up:
                    self.get_logger().info('Flecha Up presionada. Avanzando...')
                    self.move_forward()
                elif key == keyboard.Key.down:
                    self.get_logger().info('Flecha Down presionada. Retrocediendo...')
                    self.move_backward()
                elif key == keyboard.Key.left:
                    self.get_logger().info('Flecha Left presionada. Girando a la izquierda...')
                    self.turn_left()
                elif key == keyboard.Key.right:
                    self.get_logger().info('Flecha Right presionada. Girando a la derecha...')
                    self.turn_right()
            except AttributeError:
                pass

        with keyboard.Listener(on_press=on_press) as listener:
            listener.join()

    def move_forward(self):     #Funcion para mover la tortuga hacia adelante
        msg = Twist()

        msg.linear.x = 1.0  
        msg.angular.z = 0.0  
        self.publisher_.publish(msg)

    def move_backward(self):    #Funcion para mover la tortuga hacia atras
        msg = Twist()

        msg.linear.x = -1.0  
        msg.angular.z = 0.0  
        self.publisher_.publish(msg)

    def turn_left(self):    #Funcion para girar la tortuga hacia la izquierda
        msg = Twist()

        msg.linear.x = 0.0 
        msg.angular.z = 1.0  
        self.publisher_.publish(msg)

    def turn_right(self):      #Funcion para girar la tortuga hacia la derecha
        msg = Twist()
        
        msg.linear.x = 0.0  
        msg.angular.z = -1.0  
        self.publisher_.publish(msg)

def main(args=None):    #Funcion principal
    rclpy.init(args=args)
    node = TurtleController()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()
    
    
